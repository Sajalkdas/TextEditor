package TextEditor;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.undo.UndoManager;

/*
 * @author Sajal Das, Alexadner C, Nitish G, Ali E, Joseph C
 */
public class TextEditorFrame extends javax.swing.JFrame implements ActionListener, DocumentListener, WindowListener {
    private boolean dirty;
    private boolean isDarkMode = false;
    private UndoManager undoManager = new UndoManager();
    
    private Timer autoSaveTimer;  // Added for autosave
    private boolean autoSaveEnabled = false;  // Added for autosave
    /*
     * Creates new form EditorClass
     */
    public TextEditorFrame() {
        initComponents();
        jMenuItemExit.addActionListener((ActionListener) this);
        jTextArea.getDocument().addDocumentListener((DocumentListener) this);
        addWindowListener((WindowListener) this);
        jTextArea.getDocument().addUndoableEditListener(e -> undoManager.addEdit(e.getEdit()));
        setLightMode();
    }
       
    private void setDarkMode() {
        getContentPane().setBackground(Color.DARK_GRAY);
        getContentPane().setForeground(Color.WHITE);
        jTextArea.setBackground(Color.DARK_GRAY);
        jTextArea.setForeground(Color.WHITE);
        jTextFieldStatus.setBackground(Color.DARK_GRAY);
        jTextFieldStatus.setForeground(Color.WHITE);
        isDarkMode = true;
    }

    private void setLightMode() {
        getContentPane().setBackground(Color.WHITE);
        getContentPane().setForeground(Color.BLACK);
        jTextArea.setBackground(Color.WHITE);
        jTextArea.setForeground(Color.BLACK);
        jTextFieldStatus.setBackground(Color.WHITE);
        jTextFieldStatus.setForeground(Color.BLACK);
        isDarkMode = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu = new javax.swing.JPopupMenu();
        jPopupUndo = new javax.swing.JMenuItem();
        jPopupRedo = new javax.swing.JMenuItem();
        jPopupCut = new javax.swing.JMenuItem();
        jPopupCopy = new javax.swing.JMenuItem();
        jPopupPaste = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        jTextFieldStatus = new javax.swing.JTextField();
        jToggleButtonAutoSave = new javax.swing.JToggleButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemNew = new javax.swing.JMenuItem();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItemPrint = new javax.swing.JMenuItem();
        jMenuItemClose = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemUndo = new javax.swing.JMenuItem();
        jMenuItemRedo = new javax.swing.JMenuItem();
        jMenuItemCut = new javax.swing.JMenuItem();
        jMenuItemCopy = new javax.swing.JMenuItem();
        jMenuItemSelectAll = new javax.swing.JMenuItem();
        jMenuItemPaste = new javax.swing.JMenuItem();
        jMenuItemFind = new javax.swing.JMenuItem();
        jMenuItemReplace = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItemZoomIn = new javax.swing.JMenuItem();
        jMenuItemZoomOut = new javax.swing.JMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();

        jPopupUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jPopupUndo.setText("Undo");
        jPopupUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPopupUndoActionPerformed(evt);
            }
        });
        jPopupMenu.add(jPopupUndo);

        jPopupRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jPopupRedo.setText("Redo");
        jPopupRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPopupRedoActionPerformed(evt);
            }
        });
        jPopupMenu.add(jPopupRedo);

        jPopupCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jPopupCut.setText("Cut");
        jPopupCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPopupCutActionPerformed(evt);
            }
        });
        jPopupMenu.add(jPopupCut);

        jPopupCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jPopupCopy.setText("Copy");
        jPopupCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPopupCopyActionPerformed(evt);
            }
        });
        jPopupMenu.add(jPopupCopy);

        jPopupPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jPopupPaste.setText("Paste");
        jPopupPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPopupPasteActionPerformed(evt);
            }
        });
        jPopupMenu.add(jPopupPaste);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Text Editor");
        setAutoRequestFocus(false);

        jTextArea.setColumns(20);
        jTextArea.setLineWrap(true);
        jTextArea.setRows(5);
        jTextArea.setWrapStyleWord(true);
        jTextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTextAreaMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea);

        jTextFieldStatus.setText("Status");
        jTextFieldStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldStatusActionPerformed(evt);
            }
        });

        jToggleButtonAutoSave.setText("AutoSave");
        jToggleButtonAutoSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonAutoSaveActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItemNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemNew.setText("New Tab");
        jMenuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemNew);

        jMenuItemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemOpen.setText("Open File");
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemOpen);

        jMenuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemSave.setText("Save File");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSave);

        jMenuItemPrint.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemPrint.setText("Print");
        jMenuItemPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPrintActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemPrint);

        jMenuItemClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemClose.setText("Close Tab");
        jMenuItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCloseActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemClose);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItemUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemUndo.setText("Undo");
        jMenuItemUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUndoActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemUndo);

        jMenuItemRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemRedo.setText("Redo");
        jMenuItemRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRedoActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemRedo);

        jMenuItemCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemCut.setText("Cut");
        jMenuItemCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCutActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemCut);

        jMenuItemCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemCopy.setText("Copy ");
        jMenuItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCopyActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemCopy);

        jMenuItemSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemSelectAll.setText("Select All");
        jMenuItemSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSelectAllActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemSelectAll);

        jMenuItemPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemPaste.setText("Paste");
        jMenuItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPasteActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemPaste);

        jMenuItemFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemFind.setText("Find");
        jMenuItemFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFindActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemFind);

        jMenuItemReplace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemReplace.setText("Replace");
        jMenuItemReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReplaceActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemReplace);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("View");

        jMenuItemZoomIn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PLUS, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemZoomIn.setText("Zoom In");
        jMenuItemZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemZoomInActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemZoomIn);

        jMenuItemZoomOut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemZoomOut.setText("Zoom Out");
        jMenuItemZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemZoomOutActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemZoomOut);

        jCheckBoxMenuItem1.setText("Dark Mode");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem1);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTextFieldStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonAutoSave)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButtonAutoSave))
                .addGap(1, 1, 1))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewActionPerformed
        //jTextArea.setText("");
        TextEditorFrame newFrame = new TextEditorFrame();
        newFrame.setVisible(true);
        jTextFieldStatus.setText("New Tab");
    }//GEN-LAST:event_jMenuItemNewActionPerformed

    
    private void jMenuItemUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUndoActionPerformed
        try {
            if (undoManager.canUndo()) {
                undoManager.undo();
            }
        } catch (Exception e) {
            System.out.println(e);
        }        
    }//GEN-LAST:event_jMenuItemUndoActionPerformed
 
    private void jMenuItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPasteActionPerformed
        jTextArea.paste();
    }//GEN-LAST:event_jMenuItemPasteActionPerformed

    private void jMenuItemZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemZoomOutActionPerformed
        Font font = jTextArea.getFont();
        float size = font.getSize() - 2.0f;
        jTextArea.setFont(font.deriveFont(size));
    }//GEN-LAST:event_jMenuItemZoomOutActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        if(dirty){
         saveFile();
        }
         System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed
    
    @Override
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();
        if(source == jMenuItemExit){
            if(dirty){
                saveFile();
            }
            System.exit(0);
        }
    }
    
    public void saveFile(){
        java.awt.Toolkit.getDefaultToolkit().beep();
        int retValue = JOptionPane.showOptionDialog(this, "Document has changed. Save changes?", "Save Changes?", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[]{"Save","Discard"}, "Save");
        if(retValue == 0){
            try{
                File f;
                JFileChooser chooser = new JFileChooser();
                int saveValue = chooser.showSaveDialog(this);
                if(saveValue == JFileChooser.APPROVE_OPTION){
                    f = chooser.getSelectedFile();
                }else{
                    return;
                }
                BufferedReader reader = new BufferedReader(new StringReader(jTextArea.getText()));
                BufferedWriter writer = new BufferedWriter(new FileWriter(f));
                String str;
                while((str = reader.readLine()) != null){
                    writer.write(str + System.getProperty("line.separator"));
                }
                writer.flush();
                reader.close();
                writer.close();
                jTextFieldStatus.setText("Saved" + chooser.getSelectedFile());
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, "Unable to save file");
            }
        }
    }
        
    @Override
    public void insertUpdate(DocumentEvent e) {
        dirty = true;
    }
    
    @Override
    public void removeUpdate(DocumentEvent e) {
        dirty = true;
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        //plain text components don't fire this event
    }

    @Override
    public void windowOpened(WindowEvent e) {
        
    }

    @Override
    public void windowClosing(WindowEvent e) {
        if(dirty)
            saveFile();
    }

    @Override
    public void windowClosed(WindowEvent e) {
        
    }

    @Override
    public void windowIconified(WindowEvent e) {
        
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        
    }

    @Override
    public void windowActivated(WindowEvent e) {
        
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        
    }
    
    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        int chooserValue = chooser.showSaveDialog(this);
        if(chooserValue == JFileChooser.APPROVE_OPTION) {
            try {
                PrintWriter fout = new PrintWriter(chooser.getSelectedFile());
                fout.print(jTextArea.getText());
                fout.close();
                jTextFieldStatus.setText("Saved" + chooser.getSelectedFile());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TextEditorFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItemSaveActionPerformed

    private void jTextFieldStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldStatusActionPerformed
        try {
            jTextFieldStatus.setText("Line: " + (jTextArea.getLineOfOffset(jTextArea.getCaretPosition())+1));
        } catch (BadLocationException ex) {
           
        }
    }//GEN-LAST:event_jTextFieldStatusActionPerformed

    private void jMenuItemCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCutActionPerformed
        jTextArea.cut();
    }//GEN-LAST:event_jMenuItemCutActionPerformed

    private void jMenuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCopyActionPerformed
        jTextArea.copy();
    }//GEN-LAST:event_jMenuItemCopyActionPerformed

    private void jMenuItemPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPrintActionPerformed
        try {
            jTextArea.print();
        } catch (PrinterException ex) {
            Logger.getLogger(TextEditorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemPrintActionPerformed

    private void jMenuItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCloseActionPerformed
        if (autoSaveEnabled){
            dispose();
            TextEditorFrame newFrame = new TextEditorFrame();
            newFrame.setVisible(true);
            jTextFieldStatus.setText("Tab Closed");
            //System.out.println("testauto");        
        }
        //do a new frame like     TextEditorFrame textEditorFrame = new TextEditorFrame();   or just ask how to exit file? the do the "" 
        
        /*if(dirty){
         saveFile();
        }
        jTextArea.setText("");
        jTextFieldStatus.setText("Tab Closed");*/
        else if(autoSaveEnabled == false && dirty == true){
            saveFile();
            dispose();
            TextEditorFrame newFrame = new TextEditorFrame();
            newFrame.setVisible(true);
            jTextFieldStatus.setText("Tab Closed");
            //System.out.println("testauto");
        }
        //TextEditorFrame newFrame = new TextEditorFrame();
        //newFrame.setVisible(true);
        else {
            dispose();
        }
    }//GEN-LAST:event_jMenuItemCloseActionPerformed

    private void jMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenActionPerformed
        JFileChooser chooser = new JFileChooser();
//        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files", "txt");
//        chooser.setFileFilter(filter);
        int chooserValue = chooser.showOpenDialog(this);
        
        if(chooserValue == JFileChooser.APPROVE_OPTION) {
           File file =  chooser.getSelectedFile();
           try {
               BufferedReader reader = new BufferedReader(new FileReader(file)); 
               jTextArea.setText("");
                
                String line;
                while ((line = reader.readLine()) != null) {
                    jTextArea.append(line + "\n");
                    
                    jTextFieldStatus.setText("File Opened Successfully!");
                }
            }catch (IOException ioException) {
                jTextFieldStatus.setText("File Can't be Opened!");
            }  
        }
    }//GEN-LAST:event_jMenuItemOpenActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItemZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemZoomInActionPerformed
        Font font = jTextArea.getFont();
        float size = font.getSize() + 2.0f;
        jTextArea.setFont(font.deriveFont(size));
    }//GEN-LAST:event_jMenuItemZoomInActionPerformed

    private void jMenuItemRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRedoActionPerformed
        try {
            if (undoManager.canRedo()) {
                undoManager.redo();
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jMenuItemRedoActionPerformed

    private void jMenuItemFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFindActionPerformed
         String searchText = JOptionPane.showInputDialog(this, "Find: ");
        if (searchText != null && searchText.length() > 0) {
            String text = jTextArea.getText();
            int index = text.indexOf(searchText);
            if (index >= 0) {
                jTextArea.setCaretPosition(index);
                jTextArea.moveCaretPosition(index + searchText.length());
                jTextFieldStatus.setText("Text Found");
            } else {
                JOptionPane.showMessageDialog(this, "Text not found.");
            }
        }
    }//GEN-LAST:event_jMenuItemFindActionPerformed

    private void jMenuItemReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemReplaceActionPerformed
        String searchText = JOptionPane.showInputDialog(this, "Find:");
        if (searchText != null && searchText.length() > 0) {
            String replaceText = JOptionPane.showInputDialog(this, "Replace:");
            if (replaceText != null) {
                String text = jTextArea.getText();
                int index = text.indexOf(searchText);
                if (index >= 0) {
                    jTextArea.replaceRange(replaceText, index, index + searchText.length());
                    jTextFieldStatus.setText("Text Replaced");
                } else {
                    JOptionPane.showMessageDialog(this, "Text not found.");
                }
            }
        }
    }//GEN-LAST:event_jMenuItemReplaceActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        if (isDarkMode) {
            setLightMode();
        } else {
            setDarkMode();
        }   
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jMenuItemSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSelectAllActionPerformed
        jTextArea.selectAll();
    }//GEN-LAST:event_jMenuItemSelectAllActionPerformed

    private void jToggleButtonAutoSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonAutoSaveActionPerformed
        // Toggle autosave when the user clicks the button
        autoSaveEnabled = !autoSaveEnabled;

        if (autoSaveEnabled) {
            // Prompt the user to choose the autosave file location
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Choose Autosave Location");
            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File autosaveFile = fileChooser.getSelectedFile();
                String autosaveFilePath = autosaveFile.getAbsolutePath();

                // Set up the autosave timer (every 5 minutes in this example)
                int autoSaveInterval = 5000; //5 * 60 * 1000; // 5 minutes in milliseconds
                autoSaveTimer = new Timer(autoSaveInterval, new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        saveToFile(autosaveFilePath);
                    }
                });
                autoSaveTimer.start();
            } else {
                // If the user canceled, disable autosave
                autoSaveEnabled = false;
            }
        } else {
            if (autoSaveTimer != null) {
                autoSaveTimer.stop();
            }
        }

        jToggleButtonAutoSave.setSelected(autoSaveEnabled);
    }//GEN-LAST:event_jToggleButtonAutoSaveActionPerformed

    private void jPopupCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPopupCutActionPerformed
        jTextArea.cut();
    }//GEN-LAST:event_jPopupCutActionPerformed

    private void jTextAreaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaMouseReleased
        if (evt.isPopupTrigger()) {
            jPopupMenu.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTextAreaMouseReleased

    private void jPopupUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPopupUndoActionPerformed
        try {
            if (undoManager.canUndo()) {
                undoManager.undo();
            }
        } catch (Exception e) {
            System.out.println(e);
        } 
    }//GEN-LAST:event_jPopupUndoActionPerformed

    private void jPopupRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPopupRedoActionPerformed
        try {
            if (undoManager.canRedo()) {
                undoManager.redo();
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jPopupRedoActionPerformed

    private void jPopupCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPopupCopyActionPerformed
        jTextArea.copy();
    }//GEN-LAST:event_jPopupCopyActionPerformed

    private void jPopupPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPopupPasteActionPerformed
        jTextArea.paste();
    }//GEN-LAST:event_jPopupPasteActionPerformed

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextEditorFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemClose;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemCut;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemFind;
    private javax.swing.JMenuItem jMenuItemNew;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JMenuItem jMenuItemPaste;
    private javax.swing.JMenuItem jMenuItemPrint;
    private javax.swing.JMenuItem jMenuItemRedo;
    private javax.swing.JMenuItem jMenuItemReplace;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JMenuItem jMenuItemSelectAll;
    private javax.swing.JMenuItem jMenuItemUndo;
    private javax.swing.JMenuItem jMenuItemZoomIn;
    private javax.swing.JMenuItem jMenuItemZoomOut;
    private javax.swing.JMenuItem jPopupCopy;
    private javax.swing.JMenuItem jPopupCut;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JMenuItem jPopupPaste;
    private javax.swing.JMenuItem jPopupRedo;
    private javax.swing.JMenuItem jPopupUndo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JTextField jTextFieldStatus;
    private javax.swing.JToggleButton jToggleButtonAutoSave;
    // End of variables declaration//GEN-END:variables

     private void saveToFile(String fileName) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(new File(fileName)))) {
            writer.write(jTextArea.getText());
            writer.flush();
            dirty = false;  // Reset dirty flag after autosave
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    
}
